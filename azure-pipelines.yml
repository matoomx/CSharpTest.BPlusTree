# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main
  - refs/tags/release/*
  - refs/pull/*

variables:
  solution: CSharpTest.Net.Collections.sln
  buildConfiguration: Release
stages:
    - stage: Build
      jobs:
        - job: A
          displayName: Build
          pool:
            vmImage: 'windows-latest'
          steps:
            - task: PowerShell@2
              displayName: 'Set version number'
              inputs:
                targetType: 'inline'
                script: |
                  $tag = "$(Build.SourceBranch)".Replace("refs/tags/release/","")
                  $regexString = "^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$"
                  $regex = new-object System.Text.RegularExpressions.Regex ($regexString,[System.Text.RegularExpressions.RegexOptions]::MultiLine)
                  Write-Host "Pushed tag is $tag"
                  if ($tag -match $regex)
                  {
                    Write-Host "$tag conforms to semantic version; Setting Azure DevOps variable PACKAGE_VERSION..."
                    Write-Host "##vso[build.addbuildtag]ReleaseBuild"
                  }
                  else
                  {
                    # Error out if the tag doesn't conform to semantic versioning standard
                    Write-Host "$tag does not conform to semantic versioning"
                    Write-Host "##vso[build.addbuildtag]ContinuouslyBuild"
                    $tag = "0.0.0-nightly$(Build.BuildNumber)"
                  }
                  Write-Host "##vso[task.setvariable variable=PACKAGE_VERSION]$tag"
                  Write-Host "PACKAGE_VERSION set to 0.0.0-nightly$(Build.BuildNumber)"

            - task: UseDotNet@2
              displayName: Use .NET 6.x
              inputs:
                version: 6.x
                performMultiLevelLookup: true
                includePreviewVersions: $(dotnetIncludePreviewVersions)
            - task: UseDotNet@2
              displayName: Use .NET 7.x #Multi targeted
              inputs:
                version: 7.x
                performMultiLevelLookup: true
                includePreviewVersions: $(dotnetIncludePreviewVersions)
            - task: DotNetCoreCLI@2
              displayName: Run dotnet restore
              inputs:
                command: restore
                projects: $(solution)
            - task: DotNetCoreCLI@2
              displayName: Run dotnet build
              inputs:
                command: build
                projects: $(solution)
                arguments: '--configuration $(buildConfiguration) --no-restore -p:ContinuousIntegrationBuild=true'
            - task: DotNetCoreCLI@2
              displayName: Run dotnet pack
              inputs:
                command: pack
                projects: $(solution)
                arguments: '--configuration $(buildConfiguration) --no-build --no-restore --output $(Build.ArtifactStagingDirectory)'
            - task: PublishPipelineArtifact@1
              displayName: Publish NuGet
              inputs:
                targetPath: $(Build.ArtifactStagingDirectory)
                artifactName: NuGet
    - stage: Unit
      displayName: Unit Tests
      dependsOn: Build
      jobs:
        # Unit Tests
        - job:
          displayName: Unit Tests
          strategy:
            matrix:
              Windows:
                vmImage: 'windows-latest'
#              Linux:
#                vmImage: 'ubuntu-latest'
#              macOS:
#                vmImage: 'macOS-latest'
          pool:
            vmImage: $(vmImage)
          steps:
            - task: UseDotNet@2
              displayName: Use .NET 7.x
              inputs:
                version: 7.x
                performMultiLevelLookup: true
            - task: DotNetCoreCLI@2
              displayName: Run dotnet test
              inputs:
                command: test
                projects: '**/*.Test.csproj'
                arguments: '--configuration $(buildConfiguration)'
                testRunTitle: Unit Tests - $(Agent.OS)